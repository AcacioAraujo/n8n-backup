{
  "createdAt": "2025-04-01T17:41:37.601Z",
  "updatedAt": "2025-04-04T14:14:07.412Z",
  "id": "sdOiD4Cjz9laWwVd",
  "name": "[MCN ADVOGADOS]-[AGENDAMENTO DE REUNIÃO]",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "resource": "event",
        "fromAllCalendars": false,
        "calendarId": {
          "__rl": true,
          "value": "AAMkAGQ3ODFlODdhLWFlMWYtNDM4Mi05YmNmLTgxNDNjMGY5ZTg1NQBGAAAAAAA027rLNeOLQ5MQFaV06yPyBwD62yPncSo9T7K039KZrGRcAAAAAAEGAAD62yPncSo9T7K039KZrGRcAAALyF9YAAA=",
          "mode": "list",
          "cachedResultName": "Teste Robotriz"
        },
        "output": "fields",
        "fields": [
          "start",
          "end"
        ],
        "filters": {
          "custom": "start/dateTime gt '2025-03-20T00:00:00'"
        }
      },
      "id": "e172c880-9cc5-4256-a692-8427d29e3a6e",
      "name": "Consultar agenda Leonardo",
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        780,
        300
      ],
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "lYa6AQ8mJOydecG7",
          "name": "MCN Advogados"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "start, end",
        "options": {}
      },
      "id": "3d7c2b1e-637b-421d-a5ff-e3d89d231a97",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        980,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "389a1056-e426-489b-ab6f-6bb39213d9b4",
              "name": "data_convertidas",
              "value": "={{ (() => {\n  const datas = $json.data\n  const convertido = datas.map(item => {\n    const parseDate = str => new Date(str.split('.')[0] + 'Z'); // Remove microssegundos e força como UTC\n    const formatDate = date => new Date(date.getTime() - 3 * 60 * 60 * 1000).toISOString();\n\n    return {\n      start: {\n        dateTime: formatDate(parseDate(item.start.dateTime)),\n        timeZone: \"UTC-3\"\n      },\n      end: {\n        dateTime: formatDate(parseDate(item.end.dateTime)),\n        timeZone: \"UTC-3\"\n      }\n    };\n  });\n\n  return convertido;\n})() }}",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "id": "e6dd713f-4c38-4582-a2fa-1ee8761c8a6d",
      "name": "Conversão de datas",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1200,
        300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ed350f19-08c9-4b18-8143-a17024955916",
              "name": "nome",
              "value": "={{ $json.body.nome }}",
              "type": "string"
            },
            {
              "id": "ef2d488b-58f5-42fd-9620-41d316e522c2",
              "name": "telefone",
              "value": "={{ $json.body.telefone }}",
              "type": "string"
            },
            {
              "id": "f1894f07-a6a8-453a-8f29-e91071b3b7d1",
              "name": "email",
              "value": "={{ $json.body.email }}",
              "type": "string"
            },
            {
              "id": "4fb252e6-e70a-4f7c-bbf1-481b7c992e37",
              "name": "data_agenda",
              "value": "={{ $json.body.data_agenda }}",
              "type": "string"
            },
            {
              "id": "8db75b90-78e2-4b9c-800c-f429cd20942f",
              "name": "acao",
              "value": "={{ $json.body.acao }}",
              "type": "string"
            },
            {
              "id": "b9854220-4cbd-4c0f-b251-5f43ec159ecc",
              "name": "observacoes",
              "value": "={{ $json.body.observacoes }}",
              "type": "string"
            },
            {
              "id": "d7eef651-0de1-4333-bc88-a8e59cbbc193",
              "name": "data_inicio",
              "value": "={{ (()=>{\n  const dataInicial = $now.format('yyyy-MM-dd');\n  let diasUteis = 1;\n\n  const feriadosFixosNacionais = [\n    '01-01', '04-21', '05-01', '09-07',\n    '10-12', '11-02', '11-15', '12-25'\n  ];\n\n  const feriadosFixosEstaduaisES = [\n    '05-23', // Colonização do Solo Espírito-Santense\n    '10-28', // Dia do Servidor Público\n  ];\n\n  function calcularPascoa(ano) {\n    const f = Math.floor, G = ano % 19;\n    const C = f(ano / 100);\n    const H = (C - f(C / 4) - f((8 * C + 13) / 25) + 19 * G + 15) % 30;\n    const I = H - f(H / 28) * (1 - f(29 / (H + 1)) * f((21 - G) / 11));\n    const J = (ano + f(ano / 4) + I + 2 - C + f(C / 4)) % 7;\n    const L = I - J;\n    const mes = 3 + f((L + 40) / 44);\n    const dia = L + 28 - 31 * f(mes / 4);\n    return new Date(ano, mes - 1, dia);\n  }\n\n  function obterFeriadosMoveis(ano) {\n    const pascoa = calcularPascoa(ano);\n    return [\n      pascoa,\n      new Date(pascoa.getTime() - 2 * 24 * 60 * 60 * 1000), // Sexta-feira Santa\n      new Date(pascoa.getTime() - 47 * 24 * 60 * 60 * 1000), // Carnaval\n      new Date(pascoa.getTime() + 60 * 24 * 60 * 60 * 1000), // Corpus Christi\n    ].map(d => d.toISOString().slice(0, 10));\n  }\n\n  const data = new Date(dataInicial);\n  data.setDate(data.getDate() + 1); // começa a contar do próximo dia\n\n  let adicionados = 0;\n\n  while (adicionados < diasUteis) {\n    const anoAtual = data.getFullYear();\n    const feriadosMoveis = obterFeriadosMoveis(anoAtual);\n    const diaSemana = data.getDay();\n    const dataISO = data.toISOString().slice(0, 10);\n    const mmdd = dataISO.slice(5);\n\n    const ehFeriado = feriadosFixosNacionais.includes(mmdd) ||\n                      feriadosFixosEstaduaisES.includes(mmdd) ||\n                      feriadosMoveis.includes(dataISO);\n\n    const ehFimDeSemana = diaSemana === 5 || diaSemana === 6;\n\n    if (!ehFimDeSemana) {\n      adicionados++;\n      if (adicionados === diasUteis) {\n        return dataISO;\n      }\n    }\n\n    data.setDate(data.getDate() + 1);\n  }\n\n})()\n}}",
              "type": "string"
            },
            {
              "id": "a8fea9d8-fd0f-44d8-8e8e-01608ab4f5bf",
              "name": "data_fim",
              "value": "={{ (()=>{\n  const dataInicial = $now.format('yyyy-MM-dd');\n  let diasUteis = 5;\n\n  const feriadosFixosNacionais = [\n    '01-01', '04-21', '05-01', '09-07',\n    '10-12', '11-02', '11-15', '12-25'\n  ];\n\n  const feriadosFixosEstaduaisES = [\n    '05-23', // Colonização do Solo Espírito-Santense\n    '10-28', // Dia do Servidor Público\n  ];\n\n  function calcularPascoa(ano) {\n    const f = Math.floor, G = ano % 19;\n    const C = f(ano / 100);\n    const H = (C - f(C / 4) - f((8 * C + 13) / 25) + 19 * G + 15) % 30;\n    const I = H - f(H / 28) * (1 - f(29 / (H + 1)) * f((21 - G) / 11));\n    const J = (ano + f(ano / 4) + I + 2 - C + f(C / 4)) % 7;\n    const L = I - J;\n    const mes = 3 + f((L + 40) / 44);\n    const dia = L + 28 - 31 * f(mes / 4);\n    return new Date(ano, mes - 1, dia);\n  }\n\n  function obterFeriadosMoveis(ano) {\n    const pascoa = calcularPascoa(ano);\n    return [\n      pascoa,\n      new Date(pascoa.getTime() - 2 * 24 * 60 * 60 * 1000), // Sexta-feira Santa\n      new Date(pascoa.getTime() - 47 * 24 * 60 * 60 * 1000), // Carnaval\n      new Date(pascoa.getTime() + 60 * 24 * 60 * 60 * 1000), // Corpus Christi\n    ].map(d => d.toISOString().slice(0, 10));\n  }\n\n  const data = new Date(dataInicial);\n  data.setDate(data.getDate() + 1); // começa a contar do próximo dia\n\n  let adicionados = 0;\n\n  while (adicionados < diasUteis) {\n    const anoAtual = data.getFullYear();\n    const feriadosMoveis = obterFeriadosMoveis(anoAtual);\n    const diaSemana = data.getDay();\n    const dataISO = data.toISOString().slice(0, 10);\n    const mmdd = dataISO.slice(5);\n\n    const ehFeriado = feriadosFixosNacionais.includes(mmdd) ||\n                      feriadosFixosEstaduaisES.includes(mmdd) ||\n                      feriadosMoveis.includes(dataISO);\n\n    const ehFimDeSemana = diaSemana === 5 || diaSemana === 6;\n\n    if (!ehFimDeSemana) {\n      adicionados++;\n      if (adicionados === diasUteis) {\n        return dataISO;\n      }\n    }\n\n    data.setDate(data.getDate() + 1);\n  }\n\n})()\n}}",
              "type": "string"
            },
            {
              "id": "3a4d3e9d-4f55-49f5-8161-d12afd49eb60",
              "name": "array_datas",
              "value": "={{ (()=>{\n  const dataInicial = $now.format('yyyy-MM-dd');\n  diasUteis = 5 ;\n\n  const feriadosFixosNacionais = [\n    '01-01', // Confraternização Universal\n    '04-21', // Tiradentes\n    '05-01', // Dia do Trabalho\n    '09-07', // Independência do Brasil\n    '10-12', // Nossa Senhora Aparecida\n    '11-02', // Finados\n    '11-15', // Proclamação da República\n    '12-25', // Natal\n  ];\n\n  const feriadosFixosEstaduaisES = [\n    '05-23', // Colonização do Solo Espírito-Santense\n    '10-28', // Dia do Servidor Público (opcional, mas incluído aqui)\n  ];\n\n\n  function calcularPascoa(ano) {\n    const f = Math.floor, G = ano % 19;\n    const C = f(ano / 100);\n    const H = (C - f(C / 4) - f((8 * C + 13) / 25) + 19 * G + 15) % 30;\n    const I = H - f(H / 28) * (1 - f(29 / (H + 1)) * f((21 - G) / 11));\n    const J = (ano + f(ano / 4) + I + 2 - C + f(C / 4)) % 7;\n    const L = I - J;\n    const mes = 3 + f((L + 40) / 44);\n    const dia = L + 28 - 31 * f(mes / 4);\n    return new Date(ano, mes - 1, dia);\n  }\n\n  function obterFeriadosMoveis(ano) {\n    const pascoa = calcularPascoa(ano);\n    return [\n      pascoa,\n      new Date(pascoa.getTime() - 2 * 24 * 60 * 60 * 1000), // Sexta-feira Santa\n      new Date(pascoa.getTime() - 47 * 24 * 60 * 60 * 1000), // Carnaval\n      new Date(pascoa.getTime() + 60 * 24 * 60 * 60 * 1000), // Corpus Christi\n    ].map(d => d.toISOString().slice(0, 10));\n  }\n\n  const data = new Date(dataInicial);\n  const ano = data.getFullYear();\n  const feriadosMoveis = obterFeriadosMoveis(ano);\n\n  const datasUteis = [];\n  let adicionados = 0;\n  while (adicionados < diasUteis) {\n    data.setDate(data.getDate() + 1);\n    const diaSemana = data.getDay();\n    const dataISO = data.toISOString().slice(0, 10);\n    const mmdd = dataISO.slice(5);\n\n    const ehFeriado = feriadosFixosNacionais.includes(mmdd) ||\n                      feriadosFixosEstaduaisES.includes(mmdd) ||\n                      feriadosMoveis.includes(dataISO);\n\n    const ehFimDeSemana = diaSemana === 5 || diaSemana === 6;\n\n    if (!ehFeriado && !ehFimDeSemana) {\n      datasUteis.push(dataISO);\n      adicionados++;\n    }\n  }\n\n\n  return datasUteis;\n\n})()\n}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "a2c106bb-bf90-4460-b568-27325bb5934f",
      "name": "dados",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        600,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $('OpenAI - Consultar Disponibilidade').item.json.message.content }}",
        "options": {}
      },
      "id": "cbd5d00e-c197-4b97-ae3e-efd0f62be19c",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2060,
        180
      ]
    },
    {
      "parameters": {
        "resource": "event",
        "operation": "create",
        "calendarId": {
          "__rl": true,
          "value": "AAMkAGQ3ODFlODdhLWFlMWYtNDM4Mi05YmNmLTgxNDNjMGY5ZTg1NQBGAAAAAAA027rLNeOLQ5MQFaV06yPyBwD62yPncSo9T7K039KZrGRcAAAAAAEGAAD62yPncSo9T7K039KZrGRcAAALyF9YAAA=",
          "mode": "list",
          "cachedResultName": "Teste Robotriz"
        },
        "subject": "Reunião com Acácio Araujo - Direito de Família",
        "startDateTime": "2025-04-04T10:00:00",
        "endDateTime": "2025-04-04T11:00:00",
        "additionalFields": {
          "body": "Teste de duplicidade de reunião",
          "hideAttendees": false,
          "isOnlineMeeting": true
        }
      },
      "id": "8c7d7973-0046-4420-a036-4b081dcc82ae",
      "name": "Criar agenda Leonardo",
      "type": "n8n-nodes-base.microsoftOutlook",
      "typeVersion": 2,
      "position": [
        2620,
        660
      ],
      "credentials": {
        "microsoftOutlookOAuth2Api": {
          "id": "lYa6AQ8mJOydecG7",
          "name": "MCN Advogados"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "Você é um assistente que gera um calendário de agendamento com base em dois arrays de entrada:\n\ndatasDisponiveis: uma lista de datas no formato YYYY-MM-DD\n\nhorariosOcupados: uma lista de objetos que contêm os campos start.dateTime e end.dateTime \n\nSua tarefa é gerar, para cada data em datasDisponiveis, uma lista de horários disponíveis seguindo as regras abaixo:\n\nOs horários de agendamento devem ser de hora em hora, iniciando às 09:00 e terminando às 18:00\n\nO horário entre 12:00 e 13:00 deve ser sempre excluído (intervalo de almoço)\n\nExclua todos os horários que coincidirem com o início de qualquer intervalo no campo horariosOcupados\n\nRetorne APENAS um array contendo objetos com as datas e seus respectivos horários disponíveis, no seguinte formato:\n\n[ { \"data\": \"YYYY-MM-DD\", \"horarios\": [\"09:00\", \"10:00\", \"11:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\"] }, ... ]\n\nNão inclua nenhum texto explicativo ou comentários. Retorne apenas o array com o resultado final.",
              "role": "system"
            },
            {
              "content": "=<datasDisponiveis>\n{{ $('dados').item.json.array_datas }}\n</datasDisponiveis>",
              "role": "assistant"
            },
            {
              "content": "=<horariosOcupados>\n{{ $json.data_convertidas.toJsonString() }}\n</horariosOcupados>",
              "role": "assistant"
            }
          ]
        },
        "options": {}
      },
      "id": "7877751a-54c9-4c0f-9cfe-843ff48683c2",
      "name": "OpenAI - Data disponivel",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        2880,
        320
      ],
      "credentials": {
        "openAiApi": {
          "id": "qTcKDeG1l7aS58Jy",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d4d5783e-030c-4846-a6a1-037a5171b483",
              "name": "",
              "value": "={{ (() => {\n\n  const arrayDeDatas = $json.message.content.parseJson()\n\n  const dataEspecifica = $('dados').item.json.data_agenda\n\n//return datasArray\nreturn arrayDeDatas.some(item => item.data === dataEspecifica);\n})() }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9c5f3434-c473-4abe-8785-dd34d0e7ec93",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2060,
        380
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('dados').item.json.acao }}",
                    "rightValue": "consultar_disponibilidade",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "consultar_disponibilidade"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3a67789d-0965-43fa-be92-daf86803f86e",
                    "leftValue": "={{ $('dados').item.json.acao }}",
                    "rightValue": "agendar",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "agendar"
            }
          ]
        },
        "options": {}
      },
      "id": "095042f0-7e6c-497d-ba1e-4bdb406c64d2",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1780,
        300
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o",
          "mode": "list",
          "cachedResultName": "GPT-4O"
        },
        "messages": {
          "values": [
            {
              "content": "Você é um assistente que gera um calendário de agendamento com base em dois arrays de entrada:\n\ndatasDisponiveis: uma lista de datas no formato YYYY-MM-DD\n\nhorariosOcupados: uma lista de objetos que contêm os campos start.dateTime e end.dateTime \n\nSua tarefa é gerar, para cada data em datasDisponiveis, uma lista de horários disponíveis seguindo as regras abaixo:\n\nOs horários de agendamento devem ser de hora em hora, iniciando às 09:00 e terminando às 18:00\n\nO horário entre 12:00 e 13:00 deve ser sempre excluído (intervalo de almoço)\n\nExclua todos os horários que coincidirem com o início de qualquer intervalo no campo horariosOcupados\n\nRetorne APENAS um ARRAY contendo objetos com as datas e seus respectivos horários disponíveis, no seguinte formato:\n\n[\n{ \"data\": \"2025-04-03 10:00:00\" },\n{ \"data\": \"2025-04-04 10:00:00\" },\n{ \"data\": \"2025-04-05 10:00:00\" }...\n];\n\nNão inclua nenhum texto explicativo ou comentários. Retorne SEMPRE O ARRAY com o resultado final.",
              "role": "system"
            },
            {
              "content": "=<datasDisponiveis>\n{{ $('dados').item.json.array_datas }}\n</datasDisponiveis>",
              "role": "assistant"
            },
            {
              "content": "=<horariosOcupados>\n{{ $json.data_convertidas.toJsonString() }}\n</horariosOcupados>",
              "role": "assistant"
            },
            {
              "content": "=<data_agenda>\n{{ $('dados').item.json.data_agenda }}\n</data_agenda>",
              "role": "assistant"
            }
          ]
        },
        "options": {}
      },
      "id": "2ce60d08-0b04-475a-8f6b-3e4513a01a8d",
      "name": "OpenAI - Consultar Disponibilidade",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.6,
      "position": [
        1420,
        300
      ],
      "credentials": {
        "openAiApi": {
          "id": "qTcKDeG1l7aS58Jy",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "ffb3e48e-db56-4d94-837c-47dad074fcd9",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "73dbcbea-5eaa-44ec-8833-5d9bb248e4a7",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        400,
        300
      ],
      "webhookId": "ffb3e48e-db56-4d94-837c-47dad074fcd9"
    }
  ],
  "connections": {
    "Consultar agenda Leonardo": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Conversão de datas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Conversão de datas": {
      "main": [
        [
          {
            "node": "OpenAI - Consultar Disponibilidade",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "dados": {
      "main": [
        [
          {
            "node": "Consultar agenda Leonardo",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI - Consultar Disponibilidade": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "dados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.robotriz.com.br",
            "user-agent": "PostmanRuntime/7.43.3",
            "content-length": "217",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br",
            "cache-control": "no-cache",
            "content-type": "application/json",
            "postman-token": "7798dda8-f2f2-4485-8c79-d4da0ec40c8c",
            "x-forwarded-for": "186.233.178.77",
            "x-forwarded-host": "n8n.robotriz.com.br",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "2b1c1a3d6d10",
            "x-real-ip": "186.233.178.77"
          },
          "params": {},
          "query": {},
          "body": {
            "nome": "Acacio Araujo",
            "telefone": "5535997638844",
            "email": "acacio.araujo@robotriz.com.br",
            "data_agenda": "2025-04-07 16:00:00",
            "acao": "agendar",
            "observacoes": ""
          },
          "webhookUrl": "https://webhook.robotriz.com.br/webhook-test/ffb3e48e-db56-4d94-837c-47dad074fcd9",
          "executionMode": "test"
        }
      }
    ]
  },
  "versionId": "df6654e6-44eb-4614-9367-7b1ed1cc33cc",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-02-26T23:55:34.456Z",
      "updatedAt": "2025-02-26T23:55:34.456Z",
      "id": "wXiOtXoVs8IO8LX6",
      "name": "MCN ADVOGADOS"
    }
  ]
}